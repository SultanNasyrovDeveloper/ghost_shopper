# Generated by Django 2.2.3 on 2019-12-23 14:46

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
        ('organisation_tree', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.FileField(blank=True, null=True, upload_to='user_avatars/', verbose_name='Аватар')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=70, null=True, verbose_name='Отчество')),
                ('phone_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Контактный номер')),
                ('is_customer', models.BooleanField(default=False, verbose_name='Является заказчиком')),
                ('is_performer', models.BooleanField(default=False, verbose_name='Является тайным покупателем')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PerformerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('education', models.CharField(blank=True, choices=[('Higher', 'Высшее'), ('Pre-Higher', 'Неоконченное высшее'), ('College', 'Средне-специальное'), ('School', 'Среднее'), ('Pre-school', 'Неоконченное среднее')], default=None, max_length=30, null=True, verbose_name='Образование')),
                ('work_place', models.CharField(blank=True, max_length=150, verbose_name='Место работы')),
                ('position', models.CharField(blank=True, max_length=150, verbose_name='Должность')),
                ('additional', models.TextField(blank=True, verbose_name='Дополнительная информация')),
                ('staff_comment', models.TextField(blank=True, verbose_name='Комментарии персонала')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Анкета одобрена')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.City', verbose_name='Город проживания')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='performer_profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('work_cities', models.ManyToManyField(blank=True, related_name='working_cities', to='core.City', verbose_name='Города в которых можетe проводить проверки')),
            ],
            options={
                'verbose_name': 'Тайный покупатель',
                'verbose_name_plural': 'Тайные покупатели',
            },
        ),
        migrations.CreateModel(
            name='PerformerAuto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('built_year', models.PositiveIntegerField(default=1990, verbose_name='Год выпуска')),
                ('owns_from', models.PositiveIntegerField(default=1990, verbose_name='В собственности с')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='autos', to='core.CarBrand', verbose_name='Марка авто')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='autos', to='core.CarModel', verbose_name='Модель')),
                ('performer_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='autos', to='user_profile.PerformerProfile', verbose_name='Профиль исполнителя')),
            ],
            options={
                'verbose_name': 'Транспортное средство',
                'verbose_name_plural': 'Транспортные средства',
            },
        ),
        migrations.CreateModel(
            name='PerformerApproveRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('ACTIVE', 'Активный'), ('DECLINED', 'Отклонен')], default='ACTIVE', max_length=20, verbose_name='Статус')),
                ('was_declined', models.BooleanField(default=False)),
                ('notes', models.CharField(blank=True, max_length=500, null=True, verbose_name='Замечания')),
                ('performer_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='approve_request', to='user_profile.PerformerProfile', verbose_name='Профиль')),
            ],
            options={
                'verbose_name': 'Заявка на одобрение профиля',
                'verbose_name_plural': 'Заявки на одобрение профилей',
            },
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation_tree_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employee_profiles', to='organisation_tree.OrganisationTreeNode', verbose_name='Место работы')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
    ]
